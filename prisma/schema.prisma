generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Role {
  USER
  MOD
  ADMIN
  GUEST
}

enum Gender {
  M
  F
}

model Faculty {
  facultyId   Int         @id @default(autoincrement())
  facultyName String      @unique
  programmes  Programme[]
  users       User[]
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime

  @@index([userId])
}

model User {
  id             String          @id @default(cuid())
  name           String?
  role           Role            @default(USER)
  active         Boolean         @default(true)
  dateOfBirth    DateTime?
  gender         Gender?
  phoneNo        Int?            @unique
  email          String?         @unique
  emailVerified  DateTime?
  password       String?
  profileBio     String?         @db.Text
  lastLogin      DateTime?
  faculty        Faculty?        @relation(fields: [facultyId], references: [facultyId], onDelete: NoAction)
  facultyId      Int?
  image          String?
  accounts       Account[]
  sessions       Session[]
  programmes     UserProgramme[]
  posts          Post[]
  postUpvotes    PostUpvote[]
  comments       Comment[]
  commentUpvotes CommentUpvote[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @default(now())

  @@index([facultyId])
}

model Flair {
  id        Int         @id @default(autoincrement())
  flairName String      @unique
  posts     PostFlair[]
}

model Category {
  id           Int    @id @default(autoincrement())
  categoryName String @unique
  posts        Post[]
}

model Post {
  id          Int          @id @default(autoincrement())
  title       String
  description String?      @db.Text
  user        User         @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId      String
  category    Category     @relation(fields: [categoryId], references: [id], onDelete: NoAction)
  categoryId  Int
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())
  flairs      PostFlair[]
  upvotes     PostUpvote[]
  comments    Comment[]

  @@index([userId])
  @@index([categoryId])
}

model PostUpvote {
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@id([postId, userId])
  @@index([postId])
  @@index([userId])
}

model PostFlair {
  post    Post  @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId  Int
  flair   Flair @relation(fields: [flairId], references: [id], onDelete: Cascade)
  flairId Int

  @@id([postId, flairId])
  @@index([postId])
  @@index([flairId])
}

model Comment {
  id        Int             @id @default(autoincrement())
  content   String          @db.Text
  post      Post            @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  user      User            @relation(fields: [userId], references: [id], onDelete: NoAction)
  userId    String
  parent    Comment?        @relation("ParentChild", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId  Int?
  children  Comment[]       @relation("ParentChild")
  upvotes   CommentUpvote[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now())

  @@index([postId])
  @@index([userId])
  @@index([parentId])
}

model CommentUpvote {
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String

  @@id([commentId, userId])
  @@index([commentId])
  @@index([userId])
}

model Course {
  id             Int                   @id @default(autoincrement())
  courseName     String                @unique
  tutorialGroups CourseTutorialGroup[]
  programmes     ProgrammeCourse[]
}

model Programme {
  id            Int               @id @default(autoincrement())
  programmeName String            @unique
  faculty       Faculty           @relation(fields: [facultyId], references: [facultyId], onDelete: NoAction)
  facultyId     Int
  users         UserProgramme[]
  courses       ProgrammeCourse[]
  tutorialGroup TutorialGroup[]

  @@index([facultyId])
}

model TutorialGroup {
  tutorialGroupId   Int                   @id @default(autoincrement())
  tutorialGroupName String                @unique
  programme         Programme             @relation(fields: [programmeId], references: [id], onDelete: NoAction)
  programmeId       Int
  courses           CourseTutorialGroup[]

  @@index([programmeId])
}

model CourseTutorialGroup {
  course          Course        @relation(fields: [courseId], references: [id], onDelete: NoAction)
  courseId        Int
  tutorialGroup   TutorialGroup @relation(fields: [tutorialGroupId], references: [tutorialGroupId], onDelete: NoAction)
  tutorialGroupId Int

  @@id([courseId, tutorialGroupId])
  @@index([courseId])
  @@index([tutorialGroupId])
}

model ProgrammeCourse {
  programmeId Int
  programme   Programme @relation(fields: [programmeId], references: [id], onDelete: NoAction)
  courseId    Int
  course      Course    @relation(fields: [courseId], references: [id], onDelete: NoAction)

  @@id([programmeId, courseId])
  @@index([programmeId])
  @@index([courseId])
}

model UserProgramme {
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: NoAction)
  programmeId Int
  programme   Programme @relation(fields: [programmeId], references: [id], onDelete: NoAction)

  @@id([userId, programmeId])
  @@index([userId])
  @@index([programmeId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
